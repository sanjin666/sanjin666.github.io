(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{510:function(v,_,a){"use strict";a.r(_);var s=a(6),t=Object(s.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h3",{attrs:{id:"java对象的创建过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java对象的创建过程"}},[v._v("#")]),v._v(" java对象的创建过程")]),v._v(" "),a("p",[a("strong",[v._v("1、类加载检查")])]),v._v(" "),a("p",[v._v("虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的 "),a("strong",[v._v("符号引用")]),v._v("，并且检查这个"),a("strong",[v._v("符号引用代表的类是否已被加载过、解析和初始化过")]),v._v("。如果没有，那必 须先执行相应的类加载过程。")]),v._v(" "),a("p",[a("strong",[v._v("2、分配内存")])]),v._v(" "),a("p",[v._v("在类加载检查通过后，接下来虚拟机将为新生对象分配内存。"),a("strong",[v._v("对象所需的内存大小在类加载完成后便可确定")]),v._v("，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配 方式有 "),a("strong",[v._v("指针碰撞")]),v._v(" 和 "),a("strong",[v._v("空闲列表")]),v._v(" 两种，选择哪种分配方式由 "),a("strong",[v._v("Java")]),v._v(" 堆是否规整决定，而 "),a("strong",[v._v("Java")]),v._v(" 堆是否规整又由所采用的垃圾收集器是否带有"),a("strong",[v._v("压缩整理")]),v._v("功能决定。")]),v._v(" "),a("p",[a("strong",[v._v("内存分配并发问题")])]),v._v(" "),a("p",[a("strong",[v._v("CAS+失败重试（JVM默认）")]),v._v(": CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。可以保证更新操作的原子性。\n"),a("strong",[v._v("TLAB")]),v._v(": 为每一个线程"),a("strong",[v._v("预先在 Eden 区")]),v._v("分配一块儿内存，JVM 在给线程中的对象分配内存 时，首先在 TLAB 分配，当对象大于 TLAB 中的剩余内存或 TLAB 的内存已用尽时，"),a("strong",[v._v("再采用 上述的 CAS 进行内存分配")])]),v._v(" "),a("p",[a("strong",[v._v("3、初始化零值")])]),v._v(" "),a("p",[v._v("内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值(不包括对象头)，这一步操 作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，程序能访问到这些字段的 数据类型所对应的零值")]),v._v(" "),a("p",[a("strong",[v._v("4、设置对象头")])]),v._v(" "),a("p",[v._v("初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。")]),v._v(" "),a("p",[a("strong",[v._v("5、执行init方法")])]),v._v(" "),a("p",[v._v("在上面工作都完成之后，从虚拟机的视⻆来看，一个新的对象已经产生了，但从 Java 程序的视 ⻆来看，对象创建才刚开始， "),a("init",[v._v(" 方法还没有执行，所有的字段都还为零。所以一般来说， 执行 new 指令之后会接着执行 "),a("init",[v._v(" 方法，把对象按照程序员的意愿进行初始化，这样一个真 正可用的对象才算完全产生出来。")])],1)],1),v._v(" "),a("h3",{attrs:{id:"jvm的类加载机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm的类加载机制"}},[v._v("#")]),v._v(" "),a("strong",[v._v("JVM的类加载机制？")])]),v._v(" "),a("p",[v._v("Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。")]),v._v(" "),a("ul",[a("li",[a("p",[a("strong",[v._v("加载阶段")]),v._v("将类的class文件读入到内存，并为之创建一个java.lang.Class对象，  类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。通过使用不同的类加载器，可以从不同来源加载类的二进制数据。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("链接阶段")]),v._v("又分为三个阶段：")]),v._v(" "),a("p",[v._v("**验证：**验证阶段用于检验被加载的类是否有正确的内部结构，并和其他类协调一致。验证的目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，不会危害虚拟机自身安全。其主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。")]),v._v(" "),a("p",[v._v("**准备：**类准备阶段负责为类的静态变量分配内存，并设置默认初始值。")]),v._v(" "),a("p",[v._v("**解析：**将类的二进制数据中的符号引用替换成直接引用。")])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("初始化")]),v._v("是为类的静态变量赋予正确的初始值")])])]),v._v(" "),a("p",[a("strong",[v._v("双亲委派机制？")])]),v._v(" "),a("p",[v._v("双亲委派机制，其工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。")]),v._v(" "),a("p",[v._v("JVM预定义三种类加载器")]),v._v(" "),a("p",[a("strong",[v._v("启动类加载器")]),v._v("（bootstrap class loader）:它用来加载 Java 的核心类。")]),v._v(" "),a("p",[a("strong",[v._v("扩展类加载器")]),v._v("（extensions class loader）：它负责加载JRE的扩展目录，lib/ext或者由java.ext.dirs系统属性指定的目录中的JAR包的类。")]),v._v(" "),a("p",[a("strong",[v._v("系统类加载器")]),v._v("（system class loader）：被称为系统（也称为应用）类加载器，它负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，或者CLASSPATH换将变量所指定的JAR包和类路径。")]),v._v(" "),a("p",[v._v("采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改。")])])}),[],!1,null,null,null);_.default=t.exports}}]);